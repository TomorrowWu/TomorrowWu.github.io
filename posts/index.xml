<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 不破楼兰终不还</title>
    <link>https://lovecoding.club/posts/</link>
    <description>Recent content in Posts on 不破楼兰终不还</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 07 Dec 2018 09:36:09 +0800</lastBuildDate>
    
	<atom:link href="https://lovecoding.club/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>【转载“架构师之路”公众号】58到家MySQL军规升级版（MySQL规范篇）</title>
      <link>https://lovecoding.club/2018/12/07/%E8%BD%AC%E8%BD%BD%E6%9E%B6%E6%9E%84%E5%B8%88%E4%B9%8B%E8%B7%AF%E5%85%AC%E4%BC%97%E5%8F%B758%E5%88%B0%E5%AE%B6mysql%E5%86%9B%E8%A7%84%E5%8D%87%E7%BA%A7%E7%89%88mysql%E8%A7%84%E8%8C%83%E7%AF%87.html</link>
      <pubDate>Fri, 07 Dec 2018 09:36:09 +0800</pubDate>
      
      <guid>https://lovecoding.club/2018/12/07/%E8%BD%AC%E8%BD%BD%E6%9E%B6%E6%9E%84%E5%B8%88%E4%B9%8B%E8%B7%AF%E5%85%AC%E4%BC%97%E5%8F%B758%E5%88%B0%E5%AE%B6mysql%E5%86%9B%E8%A7%84%E5%8D%87%E7%BA%A7%E7%89%88mysql%E8%A7%84%E8%8C%83%E7%AF%87.html</guid>
      <description>一、基础规范  表存储引擎必须使用InnoDB
 表字符集默认使用utf8，必要时候使用utf8mb4
  解读：
（1）通用，无乱码风险，汉字3字节，英文1字节
（2）utf8mb4是utf8的超集，有存储4字节例如表情符号时，使用它
 禁止使用存储过程，视图，触发器，Event  解读：
（1）对数据库性能影响较大，互联网业务，能让站点层和服务层干的事情，不要交到数据库层
（2）调试，排错，迁移都比较困难，扩展性较差
 禁止在数据库中存储大文件，例如照片，可以将大文件存储在对象存储系统，数据库中存储路径
 禁止在线上环境做数据库压力测试
 测试，开发，线上数据库环境必须隔离
  二、命名规范  库名，表名，列名必须用小写，采用下划线分隔  解读：abc，Abc，ABC都是给自己埋坑
 库名，表名，列名必须见名知义，长度不要超过32字符  解读：tmp，wushan谁TM知道这些库是干嘛的
 库备份必须以bak为前缀，以日期为后缀
 从库必须以-s为后缀
 备库必须以-ss为后缀
  三、表设计规范  单实例表个数必须控制在2000个以内
 单表分表个数必须控制在1024个以内
 表必须有主键，推荐使用UNSIGNED整数为主键
  潜在坑：删除无主键的表，如果是row模式的主从架构，从库会挂住
 禁止使用外键，如果要保证完整性，应由应用程式实现  解读：外键使得表之间相互耦合，影响update/delete等SQL性能，有可能造成死锁，高并发情况下容易成为数据库瓶颈
 建议将大字段，访问频度低的字段拆分到单独的表中存储，分离冷热数据  解读：具体参加《如何实施数据库垂直拆分》
四、列设计规范  根据业务区分使用tinyint/int/bigint，分别会占用1/4/8字节
 根据业务区分使用char/varchar
  解读：
（1）字段长度固定，或者长度近似的业务场景，适合使用char，能够减少碎片，查询性能高
（2）字段长度相差较大，或者更新较少的业务场景，适合使用varchar，能够减少空间</description>
    </item>
    
    <item>
      <title>MySQL经验篇</title>
      <link>https://lovecoding.club/2018/12/06/mysql%E7%BB%8F%E9%AA%8C%E7%AF%87.html</link>
      <pubDate>Thu, 06 Dec 2018 21:24:09 +0800</pubDate>
      
      <guid>https://lovecoding.club/2018/12/06/mysql%E7%BB%8F%E9%AA%8C%E7%AF%87.html</guid>
      <description>互联网时代，数据库的操作越来越成为整个应用的性能瓶颈。当我们去设计数据库表结构，操作数据库时（尤其是查表时的SQL语句），我们都需要注意性能问题
SQL语句分类 SQL 语句主要可以划分为以下 3 个类别。 - DDL（Data Definition Languages）语句：数据定义语言，这些语句定义了不同的数据段、数据库、表、列、索引等数据库对象的定义。常用的语句关键字主要包括 create、drop、alter等。 - DML（Data Manipulation Language）语句：数据操纵语句，用于添加、删除、更新和查询数据库记录，并检查数据完整性，常用的语句关键字主要包括 insert、delete、udpate 和select 等。(增添改查） - DCL（Data Control Language）语句：数据控制语句，用于控制不同数据段直接的许可和访问级别的语句。这些语句定义了数据库、表、字段、用户的访问权限和安全级别。主要的语句关键字包括 grant、revoke 等。
1. 使用查询缓存 大多数MySQL服务器都开启了查询缓存，当有很多相同的查询被执行了多次的时候，这些查询结果会被放到一个缓存中，这样，后续的相同的查询就不用操作表而直接访问缓存结果了
某些查询语句会让MySQL不使用缓存。请看下面的示例：
// 查询缓存不开启 $r = mysql_query(&amp;quot;SELECT username FROM user WHERE signup_date &amp;gt;= CURDATE()&amp;quot;); // 开启查询缓存 $today = date(&amp;quot;Y-m-d&amp;quot;); $r = mysql_query(&amp;quot;SELECT username FROM user WHERE signup_date &amp;gt;= &#39;$today&#39;&amp;quot;);  MySQL对CURDATE()、 NOW() 和 RAND() 等SQL函数都不会开启查询缓存，因为函数的返回是易变的，所以需要使用变量来代替MySQL的函数，从而开启缓存
2. 使用EXPLAIN分析SELECT查询 使用EXPLAIN关键字可以让你知道MySQL如何处理SQL语句的，例如索引主键被如何利用的，数据表如何被搜索和排序的&amp;hellip;&amp;hellip;等等，帮你分析你的查询语句或是表结构的性能瓶颈。
3. 当只要一行数据时，使用LIMIT 1 某些场景下，你知道查询只会有一条结果，或者只需要判断是否存在符合条件的结果，在这种情况下，加上LIMIT 1可以增加性能，MySQL数据库引擎会在找到一条数据后停止搜索，而不是继续往后查找下一条符合条件的数据</description>
    </item>
    
    <item>
      <title>卸载 Mac 自带英文 ABC 输入法</title>
      <link>https://lovecoding.club/2018/12/01/%E5%8D%B8%E8%BD%BDmac%E8%87%AA%E5%B8%A6%E8%8B%B1%E6%96%87abc%E8%BE%93%E5%85%A5%E6%B3%95.html</link>
      <pubDate>Sat, 01 Dec 2018 10:02:09 +0800</pubDate>
      
      <guid>https://lovecoding.club/2018/12/01/%E5%8D%B8%E8%BD%BDmac%E8%87%AA%E5%B8%A6%E8%8B%B1%E6%96%87abc%E8%BE%93%E5%85%A5%E6%B3%95.html</guid>
      <description> 前言 用 Mac 的童鞋都知道，Mac 自带的中文输入法很坑爹，有木有？词库很垃圾，很多中文词是没有的，写起来很蛋疼，效率很低，绝大多数童鞋会安装最好用的中文输入法&amp;ndash;搜狗输入法（ps:不接受反驳），这样Mac 同时存在搜狗输入法和美国英语 ABC 输入法（ps：自带的 ABC输入法无法卸载），但是搜狗输入法本身就提供了英文输入法（shift 切换中英文），在某些场景下，比如输入框，Mac 的输入法会自动被切换为 ABC 输入法，又得切换回搜狗，很蛋疼有没有？鄙人找了好久，昨晚在知乎上搜到了解决方案，下面就是干
步骤 一共五个步骤： 1. 备份 ~/Library/Preferences/com.apple.HIToolbox.plist 2. 将当前活跃输入法选为「英文」输入法 3. 终端运行
plutil -convert xml1 ~/Library/Preferences/com.apple.HIToolbox.plist   用 vim 、 sublime text 或者其他编辑器，打开 com.apple.HIToolbox.plist ，删除掉 AppleEnabledInputSources 键下不需要的输入法 dict 注销账户  可能发生的问题（因人而异，笔者未发生此问题） 文件自动恢复，重新出现 ABC  改完保存了之后 command+i 显示简介，勾选已锁定 系统会不停的产生临时文件，然后合并。但由于源文件被锁定，所以无法恢复到原先的文件状态，于是不断的循环  参考资料  如何去掉 OS X 输入法中自带的美式英文？https://www.zhihu.com/question/21459701   本文为原创文章，转载注明出处，欢迎扫码关注公众号 楼兰 或者网站https://lovecoding.club,第一时间看后续精彩文章，觉得好的话，顺手分享到朋友圈吧，感谢支持。
 </description>
    </item>
    
    <item>
      <title>禁用CleanMyMac HealthMonitor</title>
      <link>https://lovecoding.club/2018/11/24/%E7%A6%81%E7%94%A8cleanmymac-healthmonitor.html</link>
      <pubDate>Sat, 24 Nov 2018 11:17:09 +0800</pubDate>
      
      <guid>https://lovecoding.club/2018/11/24/%E7%A6%81%E7%94%A8cleanmymac-healthmonitor.html</guid>
      <description> 介绍CleanMyMac 大家都知道,在Windows系统上,有360等软件做垃圾清理和软件卸载,对于大多数Mac用户,相对来说不需要类似软件做清理工作,然而,某些强迫症患者或者码农依然需要清理软件,CleanMyMac就是这么一款Mac平台上最好用的清理软件
牛皮癣后台服务 完整退出 CleanMyMac X 的程序包括菜单栏启动项后,依然有一个服务HealthMonitor在后台运行着,而且占用大量内存
即使你在安装目录删除该软件,只要你启动过CleanMyMac,这个服务又会生成,并持续后台运行
下面笔者介绍如何禁用该服务,还你一片清净
vim修改启动配置文件 sudo vim /private/var/db/launchd.db/com.apple.launchd/overrides.plist  加入如下代码 包名(com.macpaw.CleanMyMac4.HealthMonitor)随着CleanMyMac版本不同会有改动
&amp;lt;key&amp;gt;com.macpaw.CleanMyMac4.HealthMonitor&amp;lt;/key&amp;gt; &amp;lt;dict&amp;gt; &amp;lt;key&amp;gt;Disabled&amp;lt;/key&amp;gt; &amp;lt;true/&amp;gt; &amp;lt;/dict&amp;gt;  可以通过CleanMyMac查看包名 参考资料  不愧为精致的流氓软件   本文为原创文章，转载注明出处，欢迎扫码关注公众号 楼兰 或者网站https://lovecoding.club,第一时间看后续精彩文章，觉得好的话，顺手分享到朋友圈吧，感谢支持。
 </description>
    </item>
    
    <item>
      <title>乐观锁与悲观锁</title>
      <link>https://lovecoding.club/2018/11/20/%E4%B9%90%E8%A7%82%E9%94%81%E4%B8%8E%E6%82%B2%E8%A7%82%E9%94%81.html</link>
      <pubDate>Tue, 20 Nov 2018 13:56:09 +0800</pubDate>
      
      <guid>https://lovecoding.club/2018/11/20/%E4%B9%90%E8%A7%82%E9%94%81%E4%B8%8E%E6%82%B2%E8%A7%82%E9%94%81.html</guid>
      <description>何谓悲观锁与乐观锁  乐观锁对应于生活中乐观的人总是想着事情往好的方向发展 悲观锁对应于生活中悲观的人总是想着事情往坏的方向发展 这两种人各有优缺点，不能不以场景而定说一种人好于另外一种人。  悲观锁  总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁（共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程） 传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁 Java中synchronized和ReentrantLock等独占锁就是悲观锁思想的实现。  乐观锁  总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据 使用版本号机制和CAS算法实现 适用于多读的应用类型，这样可以提高吞吐量 像数据库提供的类似于write_condition机制，其实都是提供的乐观锁。 在Java中java.util.concurrent.atomic包下面的原子变量类就是使用了乐观锁的一种实现方式CAS实现的  两种锁的使用场景  两种锁各有优缺点，不可认为一种好于另一种 乐观锁适用于写比较少的情况下（多读场景），即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。但如果是多写的情况，一般会经常产生冲突，这就会导致上层应用会不断的进行retry，这样反倒是降低了性能，所以一般多写的场景下用悲观锁就比较合适  乐观锁常见的两种实现方式 1. 版本号机制 一般是在数据表中加上一个数据版本号version字段，表示数据被修改的次数，当数据被修改时，version值会加一。当线程A要更新数据值时，在读取数据的同时也会读取version值，在提交更新时，若刚才读取到的version值为当前数据库中的version值相等时才更新，否则重试更新操作，直到更新成功。
举一个简单的例子： 假设数据库中帐户信息表中有一个 version 字段，当前值为 1 ；而当前帐户余额字段（ balance ）为 $100 。
 操作员 A 此时将其读出（ version=1 ），并从其帐户余额中扣除 $50（ $100-$50 ）。 在操作员 A 操作的过程中，操作员B 也读入此用户信息（ version=1 ），并从其帐户余额中扣除 $20 （ $100-$20 ）。 操作员 A 完成了修改工作，将数据版本号加一（ version=2 ），连同帐户扣除后余额（ balance=$50 ），提交至数据库更新，此时由于提交数据版本大于数据库记录当前版本，数据被更新，数据库记录 version 更新为 2 。 操作员 B 完成了操作，也将版本号加一（ version=2 ）试图向数据库提交数据（ balance=$80 ），但此时比对数据库记录版本时发现，操作员 B 提交的数据版本号为 2 ，数据库记录当前版本也为 2 ，不满足 “ 提交版本必须大于记录当前版本才能执行更新 “ 的乐观锁策略，因此，操作员 B 的提交被驳回。  这样，就避免了操作员 B 用基于 version=1 的旧数据修改的结果覆盖操作员A 的操作结果的可能。</description>
    </item>
    
    <item>
      <title>leetcode.398.随机数索引</title>
      <link>https://lovecoding.club/2018/11/16/leetcode.398.%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%B4%A2%E5%BC%95.html</link>
      <pubDate>Fri, 16 Nov 2018 10:50:09 +0800</pubDate>
      
      <guid>https://lovecoding.club/2018/11/16/leetcode.398.%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%B4%A2%E5%BC%95.html</guid>
      <description>题目描述 给定一个可能含有重复元素的整数数组，要求随机输出给定的数字的索引。 您可以假设给定的数字一定存在于数组中。
注意:
数组大小可能非常大。 使用太多额外空间的解决方案将不会通过测试。
示例:
int[] nums = new int[] {1,2,3,3,3}; Solution solution = new Solution(nums); // pick(3) 应该返回索引 2,3 或者 4。每个索引的返回概率应该相等。 solution.pick(3); // pick(1) 应该返回 0。因为只有nums[0]等于1。 solution.pick(1);  代码实现 // Solution defines a structure type Solution struct { nums []int } // Constructor constructs a object func Constructor(nums []int) Solution { return Solution{ nums: nums, } } // Pick returns index number that target at nums Randomly.</description>
    </item>
    
    <item>
      <title>左耳听风陈皓-程序员练级攻略2018开篇词-总结</title>
      <link>https://lovecoding.club/2018/11/15/%E5%B7%A6%E8%80%B3%E5%90%AC%E9%A3%8E%E9%99%88%E7%9A%93-%E7%A8%8B%E5%BA%8F%E5%91%98%E7%BB%83%E7%BA%A7%E6%94%BB%E7%95%A52018%E5%BC%80%E7%AF%87%E8%AF%8D-%E6%80%BB%E7%BB%93.html</link>
      <pubDate>Thu, 15 Nov 2018 17:15:09 +0800</pubDate>
      
      <guid>https://lovecoding.club/2018/11/15/%E5%B7%A6%E8%80%B3%E5%90%AC%E9%A3%8E%E9%99%88%E7%9A%93-%E7%A8%8B%E5%BA%8F%E5%91%98%E7%BB%83%E7%BA%A7%E6%94%BB%E7%95%A52018%E5%BC%80%E7%AF%87%E8%AF%8D-%E6%80%BB%E7%BB%93.html</guid>
      <description> 理论和现实的差距  学院派知识有强大威力,只是你没找到相关场景 算法与数据结构、操作系统原理、编译原理、数据库原理、计算机原理……这些原理上的东西，是你想要成为一个专家必需要学的东西。这就是“工人”和“工程师”的差别，是“建筑工人”和“建筑架构师”的差别。如果你觉得这些理论上的东西无用，那么只能说明，你只不过在从事工人的工作，而不是工程师的工作。  技术能力的瓶颈  技术的东西都是死的，这些死的知识只要努力就是可以学会的 只要你的方法得当，多花点时间在基础知识上，会让你未来学习应用知识的时间大大缩短 以绝大多数人努力的程度，和为自己不努力找借口的程度为参考，只要你坚持正常的学习就可以超过大多数人了  技术无法速成  一切都是要靠你自己去努力和持续地付出 成长路径是需要思考、精力和相关的经验的，这都需要时间，而且是不短的时间。你先问问自己有没有花十年磨一剑的决心  学习建议  一定要坚持，要保持长时间学习，甚至终生学习的态度 一定要动手，不管例子多么简单，建议至少自己动手敲一遍看看是否理解了里头的细枝末节 一定要学会思考，思考为什么要这样，而不是那样。还要举一反三地思考 不要乱买书，不要乱追新技术新名词，基础的东西经过很长时间积累，会在未来至少 10 年通用 回顾一下历史，看看历史时间线上技术的发展，你才能明白明天会是什么样的  我的观点  为明天做一些技术储备,因为你不知道你所缺的东西,机会只会留给有准备的人,多多阅读,多多交流,最好写下心得强化自己的认识和记忆 真正的高手在工作之余都会花很多时间去自己研究点东西 永远和高手一起工作。如果你面试的公司的面试太简单,就不要去,简单的面试意味着平庸,只会让你学习速度变慢,甚至倒退 很多东西在概念上是想通的,在哲学层次上是相通的,这是你需要去追求的学习知识的境界 很多时候,你缺少的不是知识,而是热情! 花2-3年打实基础，坚持学习基础原理，别看他们一开始跑的快，但是没有后劲，这跟长跑和登山一样，后半程随便秒他们  必读文章  传世之文《Teach Yourself Programming in Ten Years》（中英对照版） Coolshell 作者陈皓《程序员的荒谬之言还是至理名言？》  </description>
    </item>
    
    <item>
      <title>leetcode 33 搜索旋转排序数组</title>
      <link>https://lovecoding.club/2018/11/13/leetcode.33.search-in-rotated-sorted-array.html</link>
      <pubDate>Tue, 13 Nov 2018 18:10:33 +0800</pubDate>
      
      <guid>https://lovecoding.club/2018/11/13/leetcode.33.search-in-rotated-sorted-array.html</guid>
      <description>题目描述 假设按照升序排序的数组在预先未知的某个点上进行了旋转。
( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。
搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。
你可以假设数组中不存在重复的元素。
你的算法时间复杂度必须是 O(log n) 级别。
示例1：
输入: nums = [4,5,6,7,0,1,2], target = 0 输出: 4  示例2：
输入: nums = [4,5,6,7,0,1,2], target = 3 输出: -1  代码实现 //1. 先二分遍历找到分隔点index，特征是 &amp;lt; 前一个元素, &amp;gt;后一个元素; //2. 把数组分成二个部分，[0,index-1], [index,length-1]; //3. 分别使用二分查找，找到给定的值。 //时间复杂度为log(n). 不确定有什么更好的办法 func search(nums []int, target int) int { if len(nums) == 0 { return -1 } n := len(nums) - 1 divisionIndex := findDivision(nums) if divisionIndex == 0 || divisionIndex == -1 { //非旋转排序数组 return findTarget(nums, 0, n, target) } res := findTarget(nums, 0, divisionIndex-1, target) if res !</description>
    </item>
    
    <item>
      <title>leetcode.69.sqrtx.X的平方根</title>
      <link>https://lovecoding.club/2018/11/13/leetcode.69.sqrtx.html</link>
      <pubDate>Tue, 13 Nov 2018 14:08:09 +0800</pubDate>
      
      <guid>https://lovecoding.club/2018/11/13/leetcode.69.sqrtx.html</guid>
      <description>题目描述 实现 int sqrt(int x) 函数。
计算并返回 x 的平方根，其中 x 是非负整数。
由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。
示例1:
输入: 4 输出: 2  示例2:
输入: 8 输出: 2 说明: 8 的平方根是 2.82842..., 由于返回类型是整数，小数部分将被舍去。  暴力版本 // 暴力解法 func mySqrt(x int) int { for i := 0; i &amp;lt;= x; i++ { res := i * i if res == x { return i } else if res &amp;gt; x { return i - 1 } } return -1 }  二分查找 //在有序数组中，找到最后一个小于等于给定值的数 func mySqrt2(x int) int { low, high := 0, x for low &amp;lt;= high { //防止大数相加溢出 //位运算更高效 mid := low + (high-low)&amp;gt;&amp;gt;1 product := mid * mid if product &amp;gt; x { high = mid - 1 } else { if (mid == x) || (mid+1)*(mid+1) &amp;gt; x { //遍历最后一个数 || 下一个数大于目标值 return mid } //下一个数小于等于目标值，所以mid不是最后一个数 low = mid + 1 } } return -1 }  二分查找思路  相当于从0-x中找到最后一个平方&amp;lt;=x的整数 我们求解的是最后一个小于等于给定值的元素，所以当 product&amp;lt;=x时，需要确认 mid+1 的平方&amp;gt;x 如果 mid+1 的平方 &amp;lt;= x ,说明mid肯定不是最后一个，更新low  GitHub  源码传送门 项目中会提供各种数据结构及算法的Golang实现, LeetCode解题思路及答案  参考资料 leetcode 69.</description>
    </item>
    
    <item>
      <title>leetcode 25. k个一组翻转链表</title>
      <link>https://lovecoding.club/2018/10/27/leetcode25.-k%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.html</link>
      <pubDate>Sat, 27 Oct 2018 18:10:33 +0800</pubDate>
      
      <guid>https://lovecoding.club/2018/10/27/leetcode25.-k%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.html</guid>
      <description>题目描述 给出一个链表，每 k 个节点一组进行翻转，并返回翻转后的链表。
k 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 k 的整数倍，那么将最后剩余节点保持原有顺序。
示例:
给定这个链表：1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5 当 k = 2 时，应当返回: 2-&amp;gt;1-&amp;gt;4-&amp;gt;3-&amp;gt;5 当 k = 3 时，应当返回: 3-&amp;gt;2-&amp;gt;1-&amp;gt;4-&amp;gt;5  说明: - 你的算法只能使用常数的额外空间。 - 你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。
解题思路 1. 取链表的前K个节点，如果够K个节点，就截断后进行反转，不够K个节点，说明处理完了，return 2. 反转完前K个节点后，使用递归，处理后面的链表  代码实现 // ListNode Definition for singly-linked list. type ListNode struct { Val int Next *ListNode } func reverseKGroup(head *ListNode, k int) *ListNode { if k &amp;lt; 2 || head == nil || head.Next == nil { return head } tail, needReverse := getTail(head, k) if needReverse { tailNext := tail.</description>
    </item>
    
  </channel>
</rss>